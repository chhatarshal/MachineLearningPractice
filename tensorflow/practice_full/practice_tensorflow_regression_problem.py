# -*- coding: utf-8 -*-
"""Practice_Tensorflow_Regression_Problem.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vQz75qlMUIbtJbGRJh2iRAi4INzEx8Bl
"""

import tensorflow as tf

tf.__version__

import tensorflow_datasets as datasets

url = 'http://archive.ics.uci.edu/ml/machine-learning-databases/auto-mpg/auto-mpg.data'
column_names = ['MPG', 'Cylinders', 'Displacement', 'Horsepower', 'Weight',
                'Acceleration', 'Model Year', 'Origin']
import pandas as pd
raw_dataset = pd.read_csv(url, names=column_names,
                          na_values='?', comment='\t',
                          sep=' ', skipinitialspace=True)

raw_dataset.head()
raw_dataset = raw_dataset.dropna()

target = raw_dataset["MPG"]

target

x = raw_dataset[['Cylinders', 'Displacement', 'Horsepower', 'Weight',
                'Acceleration', 'Model Year', 'Origin']]

x= x.dropna()

x

model = tf.keras.Sequential([
                             tf.keras.layers.Dense(10, activation='relu'),
                             tf.keras.layers.Dense(1)
])

model.compile(
    loss = tf.keras.losses.mae,
    optimizer = tf.keras.optimizers.Adam(learning_rate=0.01),
    metrics = ["mae"]
)

from sklearn.compose import make_column_transformer

from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split

ct = make_column_transformer(
    (MinMaxScaler(),(['Cylinders', 'Displacement', 'Horsepower', 'Weight',
                'Acceleration', 'Model Year', 'Origin']))
)

x_train, x_test, y_train, y_test = train_test_split(x, target, test_size=0.1)

ct.fit(x_train)

normalized_x =ct.transform(x_train)

model.fit(normalized_x, y_train, epochs=10)

ct.fit(x_test)
x_test_normalize = ct.transform(x_test)

model.evaluate(x_test_normalize, x_test)

[np.array(x_test_normalize)[0].tolist()]

np.array([np.array(x_test)[0].tolist()]).shape

model.predict([np.array(x_test_normalize)[0].tolist()])

y_test.reset_index(drop=True, inplace=True)

y_test[0]

x_test_normalize

