# -*- coding: utf-8 -*-
"""006 Transfer Learning With Tensorflow .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19TLiBGtMWf6NX3n9MKp9Jm0MyFf7pWcv
"""

import tensorflow as tf

!wget https://raw.githubusercontent.com/chhatarshal/MachineLearningPractice/e878dbd141610a82206b7389c299c41ffe3765d3/tensorflow/helper/helper_functions.py

from helper_functions import unzip_data

!wget https://storage.googleapis.com/ztm_tf_course/food_vision/10_food_classes_10_percent.zip

unzip_data('10_food_classes_10_percent.zip')

train_dir = '10_food_classes_10_percent/train'
test_dir = '10_food_classes_10_percent/test'

IMG_SIZE = (224, 224)
train_data = tf.keras.preprocessing.image_dataset_from_directory(train_dir, label_mode="categorical", image_size=IMG_SIZE)

test_data = tf.keras.preprocessing.image_dataset_from_directory(test_dir, label_mode="categorical", image_size=IMG_SIZE, shuffle=False) # don't s

check_point_path = '10_class_10_ptc_checkpoint'

check_point_dir = tf.keras.callbacks.ModelCheckpoint(check_point_path, monitor="val_accuracy", save_best_only=True,
                                                     save_weights_only=True)

from tensorflow.keras import layers
from tensorflow.keras.layers.experimental import preprocessing
from tensorflow.keras.models import Sequential

data_augmentation = Sequential([
      preprocessing.RandomFlip("horizontal"),
      preprocessing.RandomRotation(0.2),
      preprocessing.RandomHeight(0.2),
      preprocessing.RandomZoom(0.2)                          
])

base_model = tf.keras.applications.EfficientNetB0(include_top=False)
base_model.trainable = False

input_layer = tf.keras.layers.Input(shape=(224, 224, 3))

x = data_augmentation(input_layer)

x = base_model(x)

x = tf.keras.layers.GlobalAveragePooling2D()(x)

outputs = tf.keras.layers.Dense(10, activation="softmax")(x)

modle = tf.keras.Model(input_layer, outputs)

modle.summary()

# Compile
modle.compile(loss="categorical_crossentropy",
              optimizer=tf.keras.optimizers.Adam(), # use Adam with default settings
              metrics=["accuracy"])

# Fit
history_all_classes_10_percent = modle.fit(train_data,
                                           epochs=1, # fit for 5 epochs to keep experiments quick
                                           validation_data=test_data,
                                           validation_steps=int(0.15 * len(test_data)), # evaluate on smaller portion of test data
                                           callbacks=[check_point_dir]) # save best model weights to file

